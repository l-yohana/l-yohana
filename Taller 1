 #include <iostream>
#include <cstdlib>  // Para malloc y free
#include <string>   // Para std::string

using namespace std;

// Estructura de Producto o nodo Producto
struct Producto {
    int id;
    string nombre; // String de tama√±o din√°mico
    struct Producto* sig;
};

// Declaraci√≥n de punteros de la estructura Producto
struct Producto* cab = NULL, * aux = NULL, * aux2 = NULL;

// Funcion para pausar la ejecuci√≥n y visualizar los datos correctamente antes de limpiar pantalla
void Pausar() {
    cout << "\n Presione una tecla para continuar...";
    cin.get(); // Espera a que el usuario presione una tecla
    cin.ignore(); // Limpiar el buffer de entrada (por si hay m√°s caracteres pendientes)
}

// Funci√≥n para agregar un producto
void AgregarProducto() {
    // Reserva memoria din√°micamente para un nuevo producto usando new 
    aux = new Producto;

    // Verificar si la memoria fue asignada correctamente
    if (aux == NULL) {
        cout << "Error: no se pudo asignar memoria." << endl;
        return;
    }

    cout << "\n";
    cout << "Eligi√≥ la opci√≥n 1 Agregar producto üíæ";
    cout << "\n";
    cout << "\n";

    cout << "Ingrese el Id del producto:\n";
    cin >> aux->id;

    cout << "Ingrese el Nombre del producto:\n";
    cin.ignore();  // Limpiar el buffer de entrada para leer la cadena correctamente
    getline(cin, aux->nombre); // Leer la cadena completa usando getline

    aux->sig = NULL;
    cout << "\n";

    // Si la lista est√° vac√≠a, el nuevo nodo ser√° la cabeza
    if (cab == NULL) {
        cab = aux;
    } else {
        // Se recorre la lista hasta el √∫ltimo nodo
        aux2 = cab;
        while (aux2->sig != NULL) {
            aux2 = aux2->sig;
        }
        // Enlazar el nuevo nodo al final de la lista
        aux2->sig = aux;
    }

    // No es necesario liberar memoria aqu√≠, ya que `aux` y `aux2` son punteros locales
    // y no necesitan ser liberados manualmente.

    cout << "\n PRODUCTO GUARDADO EXITOSAMENTE. ‚úî";
}

void MostrarProductos() {
    // Encabezado llamativo
    cout << "=========================================\n";
    cout << "        üõí LISTA DE PRODUCTOS üõí        \n";
    cout << "=========================================\n";

    // Verificar si la lista est√° vac√≠a
    if (cab == NULL) {
        cout << "No hay productos registrados. üòï\n";
    } else {
        // Recorre desde la cabeza hasta NULL
        for (aux = cab; aux != NULL; aux = aux->sig) {
            cout << "üîπ ID: " << aux->id << " | Nombre: " << aux->nombre << endl;
        }
    }

    cout << "=========================================\n";
    Pausar();
}

// Funci√≥n para buscar un producto por su ID
int BuscarProducto() {
    int id_producto;
    cout << "=========================================\n";
    cout << "        üîç BUSCAR PRODUCTO üîç        \n";
    cout << "=========================================\n";
    cout << "Digite el ID del producto: ";
    cin >> id_producto;

    // Recorre la lista comparando el valor
    for (aux = cab; aux != NULL; aux = aux->sig) {
        if (aux->id == id_producto) {
            cout << "=========================================\n";
            cout << "        ‚úÖ PRODUCTO ENCONTRADO ‚úÖ        \n";
            cout << "=========================================\n";
            cout << "üîπ ID: " << aux->id << "\n";
            cout << "üîπ Nombre: " << aux->nombre << "\n";
            cout << "=========================================\n";
            Pausar();
            return 1;  // Valor encontrado
        }
    }

    // Si no se encuentra el producto
    cout << "=========================================\n";
    cout << "        ‚ùå PRODUCTO NO ENCONTRADO ‚ùå        \n";
    cout << "=========================================\n";
    cout << "No se encontr√≥ ning√∫n producto con el ID " << id_producto << ".\n";
    cout << "=========================================\n";
    Pausar();
    return 0; // Valor no encontrado
}

int EliminarProducto() {
    int id_producto;
    cout << "=========================================\n";
    cout << "        ‚ùå ELIMINAR PRODUCTO ‚ùå        \n";
    cout << "=========================================\n";
    cout << "Digite el ID del producto: ";
    cin >> id_producto;

    // Punteros para recorrer la lista
    struct Producto* anterior = NULL;
    aux = cab;

    // Recorre la lista comparando el valor
    while (aux != NULL) {
        if (aux->id == id_producto) {
            // Si el nodo a eliminar es el primero
            if (anterior == NULL) {
                cab = aux->sig; // La cabeza ahora apunta al siguiente nodo
            } else {
                anterior->sig = aux->sig; // El nodo anterior apunta al siguiente nodo
            }

            // Mostrar mensaje de √©xito
            cout << "=========================================\n";
            cout << "        ‚úÖ PRODUCTO ELIMINADO ‚úÖ        \n";
            cout << "=========================================\n";
            cout << "üîπ ID: " << aux->id << "\n";
            cout << "üîπ Nombre: " << aux->nombre << "\n";
            cout << "=========================================\n";

            // Liberar la memoria del nodo eliminado
            delete aux; // en c++ usamos esta funcion para eliminar en memoria
            Pausar();
            return 1;  // Producto eliminado
        }

        // Avanzar al siguiente nodo
        anterior = aux;
        aux = aux->sig;
    }

    // Si no se encuentra el producto
    cout << "=========================================\n";
    cout << "        ‚ùå PRODUCTO NO ENCONTRADO ‚ùå        \n";
    cout << "=========================================\n";
    cout << "No se encontr√≥ ning√∫n producto con el ID " << id_producto << ".\n";
    cout << "=========================================\n";
    Pausar();
    return 0; // Producto no encontrado
}

// Funci√≥n contar productos
int ContarProductos() {
    int contador = 0;
    // Recorre la lista contando los nodos
    for (aux = cab; aux != NULL; aux = aux->sig) {
        contador++;
    }
    cout << "=========================================\n";
    cout << "        üßÆ CONTAR PRODUCTOS üßÆ        \n  ";
    cout << "=========================================\n";
    cout << "El n√∫mero de productos es: " << contador << "\n";
    Pausar();
    return contador;
}

// Funci√≥n modificar productos
int ModificarProducto(){

    int id_producto;
    cout << "=========================================\n";
    cout << "        ‚úè MODIFICAR PRODUCTO ‚úè        \n";
    cout << "=========================================\n";
    cout << "Digite el ID del producto: ";
    cin >> id_producto;

    // Recorre la lista comparando el valor
    for (aux = cab; aux != NULL; aux = aux->sig) {
        if (aux->id == id_producto) {
            cout << "=========================================\n";
            cout << "        ‚úÖ PRODUCTO ENCONTRADO ‚úÖ        \n";
            cout << "=========================================\n";
            cout << "üîπ ID: " << aux->id << "\n";
            cout << "üîπ Nombre: " << aux->nombre << "\n";
            cout << "=========================================\n";
            cout << "Ingrese el nuevo nombre del producto:\n";
            cin.ignore();  // Limpiar el buffer de entrada para leer la cadena correctamente
            getline(cin, aux->nombre); // Leer la cadena completa usando getline
            cout << "=========================================\n";
            cout << "        ‚úÖ PRODUCTO MODIFICADO ‚úÖ        \n";
            cout << "=========================================\n";
            cout << "üîπ ID: " << aux->id << "\n";
            cout << "üîπ Nombre: " << aux->nombre << "\n";
            cout << "=========================================\n";
            Pausar();
            return 1;  // Valor encontrado
        }
    }

    // Si no se encuentra el producto
    cout << "=========================================\n";
    cout << "        ‚ùå PRODUCTO NO ENCONTRADO ‚ùå        \n";
    cout << "=========================================\n";
    cout << "No se encontr√≥ ning√∫n producto con el ID " << id_producto << ".\n";
    cout << "=========================================\n";
    Pausar();
    return 0; // Valor no encontrado     

}

int main() {
    int opcion = 0; // Variable para almacenar las opciones

    while (opcion != 7) { // Mientras la opci√≥n sea diferente de 7 se ejecutar√°
        system("clear"); // Limpiar pantalla si est√° en Linux
        system("cls");   // Limpiar pantalla si est√° en Windows

        cout << "\n";
        cout << "\n";
        cout << "===============================\n";
        cout << "     *** Men√∫ Principal ***     \n";
        cout << "===============================\n";
        cout << " 1. Agregar producto üíæ\n";
        cout << " 2. Mostrar productos üëÅ‚Äçüó®\n";
        cout << " 3. Buscar producto üîé\n";
        cout << " 4. Eliminar producto‚ùå\n";
        cout << " 5. Contar productos üßÆ\n";
        cout << " 6. Modificar productos ‚úè\n";
        cout << " 7. Salir del programa üöÄ\n";
        cout << "===============================\n";
        cout << " Seleccione una opci√≥n: ";
        cout << "\n";
        cout << "\n";

        cin >> opcion;

        switch (opcion) {
            case 1: {
                AgregarProducto();
                break;
            }
            case 2:
			{
				MostrarProductos();
                break;
			}
            case 3:
                {
                    BuscarProducto();
                    break;
                }
            case 4:
                {
                    EliminarProducto();
                    break;
                }
            case 5:
                {
                    ContarProductos();
                    break;
                }
            case 6:
               {
                     ModificarProducto();
                     break;
               }
            case 7:
                cout << "SALIO EXITOSAMENTE DEL PROGRAMA üö™\n";
                opcion = 7;
                break;
            default:
                cout << "Opci√≥n no v√°lida. Intente de nuevo.\n";
                break;
        }
    }

    return 0;
}
